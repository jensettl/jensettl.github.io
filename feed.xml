<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jens&apos; Blog</title>
    <description>I share my coding journey and insights.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 21 Aug 2025 17:06:51 +0200</pubDate>
    <lastBuildDate>Thu, 21 Aug 2025 17:06:51 +0200</lastBuildDate>
    <generator>Jekyll v4.4.1</generator>
    
      <item>
        <title>[PROJECT] Analyze resumes with Ollama locally</title>
        <description>&lt;p&gt;Placeholder for project i have built using Ollama locally to analyze resumes. Later i add a RAG pipeline to feed company data to the model.&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
</description>
        <pubDate>Thu, 21 Aug 2025 00:00:00 +0200</pubDate>
        <link>/PRJ-ollama-resume-analyzer/</link>
        <guid isPermaLink="true">/PRJ-ollama-resume-analyzer/</guid>
        
        <category>coding</category>
        
        <category>python</category>
        
        <category>ollama</category>
        
        
        <category>AI</category>
        
        <category>LLM</category>
        
      </item>
    
      <item>
        <title>Template instructions for creating a blog post</title>
        <description>&lt;h2 id=&quot;add-a-specific-header-to-your-post&quot;&gt;Add a specific header to your post&lt;/h2&gt;

&lt;p&gt;After creating the markdown file for your post, add the following header to the top of the file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;---
layout: post
title:  &quot;Title of your post&quot;
author: jens
categories: [ Category 1, Category 2 ]
tags: [ Tag 1, Tag 2 ]
rating: 4.5
image: path/to/image.jpg
beforetoc: &quot;Short paragraüh to add additional information to your post&quot;
toc: true # Summary
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;content&quot;&gt;Content&lt;/h2&gt;

&lt;p&gt;After the header start writing the content of your post in markdown syntax.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Aug 2025 00:00:00 +0200</pubDate>
        <link>/template-for-creating-post/</link>
        <guid isPermaLink="true">/template-for-creating-post/</guid>
        
        
        <category>Coding</category>
        
        <category>Lifestyle</category>
        
      </item>
    
      <item>
        <title>Markdown Syntax</title>
        <description>&lt;p&gt;This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can’t cover every edge case&lt;/p&gt;

&lt;h2 id=&quot;basic&quot;&gt;Basic&lt;/h2&gt;

&lt;p&gt;These are the elements outlined in John Gruber’s original design document. All Markdown applications support these elements.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Element&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Markdown Syntax&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Headinng&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;# H1 &lt;br /&gt; ## H2 &lt;br /&gt; ### H3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bold Text&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;** Text **&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Italic&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;* Text *&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Blockquote&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;gt; Text&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ordered List&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1. First &lt;br /&gt; 2. Second &lt;br /&gt; 3. Third&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Unordered List&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;- First &lt;br /&gt; - Second &lt;br /&gt; - Third&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Code&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;`Code`&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Horizontal Rule&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Link&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[Text] (URL)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Image&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;! [Text] (URL)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;extended-syntax&quot;&gt;Extended Syntax&lt;/h2&gt;

&lt;p&gt;These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Element&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Markdown Syntax&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Table&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;| Header 1 | Header 2 | &lt;br /&gt; | —- | ———– | &lt;br /&gt; | Cell 1 | Cell 2 |&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fenced Code Block&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;``` &lt;br /&gt; { &lt;br /&gt; “firstName”: “John”, &lt;br /&gt; “lastName”: “Smith”, &lt;br /&gt; “age”: 25 &lt;br /&gt; } &lt;br /&gt; ```&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Footnote&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Here’s a sentence with a footnote. [^1] &lt;br /&gt; [^1]: Another sentence with footnote.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Striketrough&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;~~The world is flat.~~&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Escape Symbol&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Thu, 21 Aug 2025 00:00:00 +0200</pubDate>
        <link>/markdown-syntax/</link>
        <guid isPermaLink="true">/markdown-syntax/</guid>
        
        <category>Markdown</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>LangChain Basics</title>
        <description>&lt;h1 id=&quot;langchain-basics&quot;&gt;LangChain Basics&lt;/h1&gt;

&lt;p&gt;LangChain is an &lt;strong&gt;open-source framework&lt;/strong&gt; that helps developers build applications with large language models (LLMs).&lt;br /&gt;
It provides abstractions and integrations for working with LLMs like OpenAI, Anthropic, Cohere, and others.&lt;/p&gt;

&lt;h2 id=&quot;what-is-langchain&quot;&gt;What is LangChain?&lt;/h2&gt;

&lt;p&gt;At its core, LangChain makes it easier to connect:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;LLMs&lt;/strong&gt; (e.g. GPT-4, Claude, etc.)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data sources&lt;/strong&gt; (databases, PDFs, APIs, documents, etc.)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Chains&lt;/strong&gt; (sequences of steps combining prompts, logic, and tools)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Agents&lt;/strong&gt; (LLMs that decide which tools or actions to use)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This allows you to build applications such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Chatbots &amp;amp; assistants&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Document Q&amp;amp;A systems&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Code helpers&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Workflow automation with LLMs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;where-is-langchain-being-used&quot;&gt;Where is LangChain Being Used?&lt;/h2&gt;

&lt;p&gt;Some popular use cases include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Customer support chatbots&lt;/strong&gt; trained on company documentation&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Research assistants&lt;/strong&gt; that can read PDFs or websites&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AI-powered search engines&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data analysis tools&lt;/strong&gt; where the LLM runs queries on your dataset&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Prototyping AI workflows quickly&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;basic-examples&quot;&gt;Basic Examples&lt;/h2&gt;

&lt;p&gt;Here are some minimal Python examples:&lt;/p&gt;

&lt;h3 id=&quot;1-simple-llm-call&quot;&gt;1. Simple LLM Call&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from langchain_openai import OpenAI

llm = OpenAI(model=&quot;gpt-3.5-turbo&quot;, temperature=0)
response = llm.invoke(&quot;Explain LangChain in one sentence.&quot;)
print(response)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;2-prompt-template--chain&quot;&gt;2: Prompt Template + Chain&lt;/h3&gt;

&lt;p&gt;Sometimes you want to reuse a prompt in a structured way.
Here we create a PromptTemplate, pass it to an LLMChain, and use it to generate consistent outputs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain_openai import OpenAI

# Define a reusable prompt template
prompt = PromptTemplate(
    input_variables=[&quot;topic&quot;, &quot;audience&quot;],
    template=&quot;Explain {topic} in simple terms for {audience}.&quot;
)

llm = OpenAI(model=&quot;gpt-3.5-turbo&quot;, temperature=0.5)
chain = LLMChain(llm=llm, prompt=prompt)

# Run the chain with different inputs
print(chain.run({&quot;topic&quot;: &quot;quantum computing&quot;, &quot;audience&quot;: &quot;high school students&quot;}))
print(chain.run({&quot;topic&quot;: &quot;machine learning&quot;, &quot;audience&quot;: &quot;software engineers&quot;}))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;3-document-qa-vectorstore&quot;&gt;3: Document Q&amp;amp;A (Vectorstore)&lt;/h3&gt;

&lt;p&gt;Here’s how to let an LLM answer questions over your own data using embeddings + vector search.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from langchain_openai import OpenAIEmbeddings, OpenAI
from langchain_community.vectorstores import FAISS
from langchain.chains import RetrievalQA

# Step 1: Prepare documents (could also load from PDF, DB, API)
docs = [
    &quot;LangChain is a framework for building applications with LLMs.&quot;,
    &quot;LangChain supports document Q&amp;amp;A, chatbots, and workflow automation.&quot;,
    &quot;It integrates with vector databases like FAISS, Pinecone, Chroma.&quot;
]

# Step 2: Build embeddings + vectorstore
embeddings = OpenAIEmbeddings()
docsearch = FAISS.from_texts(docs, embeddings)

# Step 3: Build a Retrieval-based QA chain
qa = RetrievalQA.from_chain_type(
    llm=OpenAI(model=&quot;gpt-3.5-turbo&quot;, temperature=0),
    retriever=docsearch.as_retriever(),
    return_source_documents=True
)

# Step 4: Ask questions
query = &quot;What can LangChain be used for?&quot;
result = qa.invoke(query)

print(&quot;Answer:&quot;, result[&quot;result&quot;])
print(&quot;\nSources:&quot;)
for doc in result[&quot;source_documents&quot;]:
    print(&quot;-&quot;, doc.page_content)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;4-automation-workflow-with-an-agent&quot;&gt;4: Automation Workflow with an Agent&lt;/h3&gt;

&lt;p&gt;Agents allow an LLM to decide which tools to use dynamically (like calling APIs, running calculations, etc.).
Here’s a simple workflow: the agent can answer general questions and do math.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from langchain_openai import OpenAI
from langchain.agents import initialize_agent, AgentType, load_tools

# Step 1: Load tools (here we add a calculator tool)
llm = OpenAI(model=&quot;gpt-3.5-turbo&quot;, temperature=0)
tools = load_tools([&quot;llm-math&quot;], llm=llm)

# Step 2: Initialize an agent
agent = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True
)

# Step 3: Run queries
print(agent.run(&quot;What&apos;s 17 times the square root of 2?&quot;))
print(agent.run(&quot;Summarize what LangChain is in 2 sentences.&quot;))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;💡 Here the LLM chooses when to use the calculator tool vs. just generating text.
In production, you can wire up tools like web search, APIs, databases, shell commands, etc.&lt;/p&gt;

&lt;h2 id=&quot;key-takeaways&quot;&gt;Key Takeaways&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;LangChain is a toolkit for LLM apps.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It simplifies prompt management, chaining, and external data integration.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Supports many backends (OpenAI, Hugging Face, Anthropic, etc.).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Great for quickly building chatbots, assistants, and AI-powered workflows.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 21 Aug 2025 00:00:00 +0200</pubDate>
        <link>/TIL-langchain-basics/</link>
        <guid isPermaLink="true">/TIL-langchain-basics/</guid>
        
        <category>langchain</category>
        
        <category>python</category>
        
        <category>automation</category>
        
        
        <category>AI</category>
        
        <category>LLM</category>
        
      </item>
    
  </channel>
</rss>
